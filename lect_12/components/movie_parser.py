import requests

#библиотека для парсинга, из нее отдельно импортируем элементы, чтоб пото обращаться к ним в коде не через родителя.
#то есть просто html, a не lxml.html
import lxml
from lxml import html


movies_params = {
#адрес. который использууем для рексевста
'url':'https://afisha.tut.by/film/', 
#а вот это уже xpath, тэги, окружающие нужные данные. Заходишь на страницу, и обычным инспектором данных находшь нужный
#элемент. Потом клацаещь по нему правой кнопкой, в панели отладки. и будет вариант "скопировть XPATH"
'current_events':'//div[@id="events-block"]',
#по lxml-синтаксису можно погуглить. он простой. ЕЕсли кортко:
# //- это означает. что поиск идет с самого верха html-страницы, но можно и задать конкретный класс.
#т.е не все шерстить с начала, а с какого-то определнного блока.
#ul - тут указываем тип элемента
#@class = это, соответсвенно, его css-класс. 
'events_list':'ul[@class = "b-lists list_afisha col-5"]',

#/span - вот тут после класса name еще указываем ,что из того блока выдрать не всю ссылку, а span внутрин нее
#//text() - говорит, что брать нужно не в формате, в котором тянет lxml, а выдирать ТЕКСТ изнутри.
#поробуй без текста, будет целый элмент с крякозябрами. Но и из него можно выдрать нужную инфу, просто удалить часть символов
'film_name':'.//a[@class = "name"]/span//text()',
}

class MoviesList:
	#преобразовываем текст из тела запроса в дерево, для того, чтоб lxml мог искать понему
	tree = html.fromstring(requests.get(movies_params['url']).text)
	#элементы выдаються уже не помню в каком формате, но с синтаксисом словаря. 
	#и чтоб пполучить доступ к данным, мы берем первый элемент(а он там всего один)
	current_events = tree.xpath(movies_params['current_events'])[0]
	events_list = current_events.xpath(movies_params['events_list'])
		


	def create_movies_list(self):
		movies_list = []
		#а тут какая фишка - html-блоков с фильмами несколько, то есть не все кино в одном.
		#поэтому я беру все html-блки с нужным стием, т.е сожежащие кино
		#прохожу по списку из них

		for movies_block in self.events_list:
			#затем по каждому из блоков - т.е это список из списков.
			for movie in movies_block:
				#и добавляю каждый из четаырех или пяти блоков с частью фильмов в один большой. 
				#а первый индекс - т.к иначе каждый фильм был бы в списке из себя одного. Убери индекс, увидишью
				movies_list+=[movie.xpath(movies_params['film_name'])[0]]
		return movies_list

movies = MoviesList().create_movies_list()
print(movies)

